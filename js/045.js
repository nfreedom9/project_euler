/*
 45.
 Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

 Triangle	 	T(n) = n * (n + 1) / 2	 		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 .................................................2..3..4...5...6...7...8...9..10
 Pentagonal	 	P(n) = n * (3 * n − 1) / 2	 	1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 .................................................4..7..10..13..16..19..22..25...28
 Hexagonal	 	H(n) = n * (2 * n − 1)	 		1, 6, 15, 28, 45, 66, 91, 120, 153, 190, ...
 .................................................5..9..13..17..21..25..29...33...37
 It can be verified that T285 = P165 = H143 = 40755.

 Find the next triangle number that is also pentagonal and hexagonal.
 */

/**
 * @return {number}
 */
function Triangle(t) {
	return t * (t + 1) / 2;
}

function reTriangle(T) {
	var n = parseInt(Math.sqrt(2 * T), 10);
	return 2 * T == n * (n + 1) ? n : 0;
}

/**
 * @return {number}
 */
function Pentagonal(p) {
	return p * (3 * p - 1) / 2;
}

//function rePentagonal(P) {
//	var i, temp = 0;
//	for (i = 0; temp < P; i++) {
//		temp = Pentagonal(i);
//		if (temp === P) return i;
//	}
//
//	return 0;
//}

function rePentagonal(P) {
	var i, temp = 0;
	for (i = 0; temp < P; i++) {
		temp = Pentagonal(i);
		if (temp === P) return i;
	}

	return 0;
}


/**
 * @return {number}
 */
function HT(h) {
	return 2 * h - 1;
}

function reHT(t) {
	return (t + 1) / 2;
}

/**
 * @return {number}
 */
function Hexagonal(h) {
	return Triangle(HT(h));
	// Triangle(HT(h))
	// Triangle(2 * h - 1)
	// t * (t + 1) / 2
	// (2 * h - 1) * h
	// h * (2 * h - 1)
}

function reHexagonal(H) {
	var h = reHT(reTriangle(H));
	return h % 1 === 0 ? h : 0;
}

/**
 * @return {boolean}
 */
function PAndH(p, h) {
	return Pentagonal(p) === Hexagonal(h);
}

//console.log(reTriangle(40755), rePentagonal(40755), reHexagonal(40755)); // 285, 165, 143
//console.log(PAndH(165, 143)); // true

(function() {
	return;
	var t, h;
	for(t = 1;;t++) {
		for (h = t;;h++) {
			if (Triangle(t) == Hexagonal(h)) {

			}
		}
	}
})();

(function(cnt) {
	//return;
	var H, h, p, idx = 1;
	// h = 1 부터 순차적으로 H = Hexagonal(h) 을 구하고,
	for (h = 1; ; h++) {
		H = Hexagonal(h);
		// p = rePentagonal(H) 값이 존재하면 두 함수를 모두 만족하는 Pentagonal(p) == Hexagonal(h)
		p = rePentagonal(H);
		if (p) {
			console.log(idx + '. Pentagonal(' + p + ') == Hexagonal(' + h + ') :  ' + H);
			idx++;
			if (idx > cnt) break;
		}
	}
})(3);
console.log();
(function(cnt) {
	//return;
	var P, p, h, idx = 1;
	// p = 1 부터 순차적으로 P = Pentagonal(p) 을 구하고,
	for (p = 1; ; p++) {
		P = Pentagonal(p);
		// h = reHexagonal(P) 값이 존재하면 두 함수를 모두 만족하는 Pentagonal(p) == Hexagonal(h)
		h = reHexagonal(P);
		if (h) {
			console.log(idx + '. Pentagonal(' + p + ') == Hexagonal(' + h + ') :  ' + P);
			idx++;
			if (idx > cnt) break;
		}
	}
})(3);

console.log();

(function(cnt) {
	return;
	var h, p, H, P, idx = 1;
	for (h = 1; ; h++) {
		H = Hexagonal(h);
		console.log(h);
		for (p = h; ; p++) {
			P = Pentagonal(p);
			if (H === P) {
				console.log(idx + '. Pentagonal(' + p + ') == Hexagonal(' + h + ') == ' + H);
				idx++;
				break;
			}

			if (H < p) {
				break;
			}
		}

		if (idx > cnt) break;
	}
})(3);
console.log('END');

// Pentagonal(1) == Hexagonal(1) :  1
// Pentagonal(165) == Hexagonal(143) :  40755
// Pentagonal(31977) == Hexagonal(27693) :  1533776805



