/*
 12.
 The sequence of triangle numbers is generated by adding the natural numbers.
 So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?
 */

var fn = require("./fn"),
	getFactorsCount = fn.getFactorsCount,
	isSquared = fn.isSquared;

function solve012_1(divisorsCount) {
	var h = 0, triNo = 0;
	while (true) {
		h += 1;
		triNo += h;
		if (getFactorsCount(triNo) > divisorsCount) return triNo;
	}
}

function solve012_2(divisorCnt) {
	var h = 0, triNo = 0, cnt;
	while (true) {
		h += 1;
		triNo += h;
		cnt = 0;
		var sqrt = Math.sqrt(triNo);
		for (var i = 1; i < sqrt; i++) if (triNo % i === 0) cnt += 2;
		if (isSquared(triNo)) cnt++;
		if (cnt > divisorCnt) return triNo;
	}
}

function solve012_3(divisorCnt) {
	var triNo = 0;

	function countOfDiv(num) {
		var count = 0, sqrt = Math.sqrt(num);
		for (var i = 1; i < sqrt; i++) {
			if (num % i === 0) count += 2;
		}
		if (i === sqrt) count++;
		return count;
	}

	for (var h = 1; countOfDiv(triNo) <= divisorCnt; h++) triNo += h;
	return triNo;
}

function solve012_4(divisorCnt) {
	function triangleNum(idx) {
		return idx * (idx + 1) / 2;
	}

	function howManyDivisorsOf(num) {
		var count = 0, sqrt = Math.sqrt(num);
		for (var i = 1; i < sqrt; i++) {
			if (num % i === 0) count++;
		}
		if (i === sqrt) return 2 * count + 1;
		return 2 * count;
	}

	var n = 1;
	while (howManyDivisorsOf(triangleNum(n)) <= divisorCnt) {
		n++;
	}
	return triangleNum(n);
}

var s = 5, q = 500;
(function(time) {
	console.log('   # 012_1: ' + solve012_1(s) + ' / ' + solve012_1(q) + ' / ' + (new Date() - time));
})(new Date());
(function(time) {
	console.log('   # 012_2: ' + solve012_2(s) + ' / ' + solve012_2(q) + ' / ' + (new Date() - time));
})(new Date());
(function(time) {
	console.log('   # 012_3: ' + solve012_3(s) + ' / ' + solve012_3(q) + ' / ' + (new Date() - time));
})(new Date());
(function(time) {
	console.log('   # 012_4: ' + solve012_4(s) + ' / ' + solve012_4(q) + ' / ' + (new Date() - time));
})(new Date());