var fn = require("./fn"),
	_ = fn._,
	getFactorsCount = fn.getFactorsCount,
	getPrimes = fn.getPrimes,
	isSquared = fn.isSquared;

console.log("# # # # # # # # # # # # # # # # # # # # 012 # # # # # # # # # # # # # # # # # # # #");

/*
 12.
 The sequence of triangle numbers is generated by adding the natural numbers.
 So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?
 */

var SAMPLE = 5, LIMIT = 500;

(function(time) {
	function my(divisorsCount) {
		var h = 0, triNo = 0;
		while (true) {
			h += 1;
			triNo += h;
			if (getFactorsCount(triNo) > divisorsCount) return triNo;
		}
	}
	console.log('1: ' + my(SAMPLE) + ' / ' + my(LIMIT) + ' / ' + (new Date() - time));
})(new Date());

(function(time) {
	function solve2(divisorCnt) {
		var h = 0, triNo = 0, cnt = 0;
		while (cnt <= divisorCnt) {
			cnt = 0;
			h += 1;
			triNo += h;
			var sqrt = Math.sqrt(triNo);
			for (var i = 1; i < sqrt; i++) if (triNo % i === 0) cnt += 2;
			if (isSquared(triNo)) cnt++;
		}
		return triNo;
	}
	console.log('2: ' + solve2(SAMPLE) + ' / ' + solve2(LIMIT) + ' / ' + (new Date() - time));
})(new Date());

(function(time) {
	function solve3(divisorCnt) {
		var h = 0, triNo = 0, cnt = 0, _triNo, exponent, primeArray = getPrimes(divisorCnt);
		while (cnt <= divisorCnt) {
			cnt = 1;
			h += 1;
			triNo += h;
			_triNo = triNo;
			for (var i = 0; i < divisorCnt; i++) {
				var PrimeFactor = primeArray[i];
				if (PrimeFactor * PrimeFactor > _triNo) { // 단 하나의 소수만을 인수로 남겨둔 상황
					cnt = 2 * cnt;
					break;
				}
				exponent = 1;
				while (_triNo % PrimeFactor === 0) { // PrimeFactor 를 인수로 몇개나 갖나..
					exponent++;
					_triNo = _triNo / PrimeFactor;
				}
				if (exponent > 1) cnt = cnt * exponent;
				if (_triNo === 1) break; // 소인수분해 끝난 상황
			}
		}
		return triNo;
	}
	console.log('3: ' + solve3(SAMPLE) + ' / ' + solve3(LIMIT) + ' / ' + (new Date() - time));
})(new Date());

(function(time) {
	function solve4(divisorCnt) {
		var triNo = 0;
		function checkCountOfDiv(num) {
			var count = 0, sqrt = Math.sqrt(num);
			for (var i = 1; i < sqrt; i++) {
				if (num % i == 0) count += 2;
			}
			if (i === sqrt) count++;
			return count > divisorCnt;
		}
		for (var h = 1; !checkCountOfDiv(triNo); h++) triNo += h;
		return triNo;
	}
	console.log('4: ' + solve4(SAMPLE) + ' / ' + solve4(LIMIT) + ' / ' + (new Date() - time));
})(new Date());

function triangleNum(idx) {
	return idx * (idx + 1) / 2;
}

function howManyDivisorsOf(num) {
	var count = 0, sqrt = Math.sqrt(num);
	for (var i = 1; i < sqrt; i++) {
		if (num % i === 0) count++;
	}
	if (i === sqrt) return 2 * count + 1;
	return 2 * count;
}

(function(time) {
	function solve5(divisorCnt) {
		var n = 1;
		while (howManyDivisorsOf(triangleNum(n)) <= divisorCnt) {
			n++;
		}
		return triangleNum(n);
	}
	console.log('5: ' + solve5(SAMPLE) + ' / ' + solve5(LIMIT) + ' / ' + (new Date() - time));
})(new Date());